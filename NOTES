Testing with Google Chrome
==========================

Use the following command-line to have Chrome proxy all requests through the
SPDY proxy at localhost:9999:

    chrome --use-spdy=no-ssl --host-resolver-rules="MAP * localhost:9999"


Installation and oonfiguration
==============================

To install, copy spdy.so into the TrafficServer plugins directory and add the
following to plugin.config, where PORT is the port to listen on:

    spdy.so [OPTIONS]

Options:
    --system-resolver
    Use the system's DNS resolver instead of the Traffic Server DNS resolver.
    This has the advantage of being able to resolve Bonjour names and
    /etc/hosts entries and the disadvantage of being a blocking API that will
    hold down a Traffic Server thread.

To enable debug, configure the spdy diagnostig tag by adding the follosing to
recods.config:

    CONFIG proxy.config.diags.debug.tags STRING spdy.*

Valid SPDY debugging tags are:
    spdy.protocol   - SPDY protocol logging
    spdy.plugin     - SPDY plugin lifecycle
    spdy.http       - HTTP client request processing

HTTP Semantics
==============

301 Moved Permanently

Currently, we just return whatever response the server sends us.
This seems like the right thing to do and none of the SPDY
specifications suggest doing otherwise. However, Chrome does not
actually follow redirections that come via the SPDY channel. It's
a pretty atrocious user experience to have to manually deal with
redirections.

Resources
=========

    * http://mbelshe.github.com/SPDY-Specification/draft-mbelshe-spdy-00.xml
    * http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2
    * http://www.chromium.org/spdy/spdy-tools-and-debugging
    * http://technotes.googlecode.com/git/nextprotoneg.html
